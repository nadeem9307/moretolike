{"version":3,"sources":["webpack:///./src/app/auth/_services/staff.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA2C;AAC6B;AACI;AAI5E;IACI,sBAAoB,IAAU,EAAU,OAA4B;QAAhD,SAAI,GAAJ,IAAI,CAAM;QAAU,YAAO,GAAP,OAAO,CAAqB;IACpE,CAAC;IAED,6BAAM,GAAN;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,cAAc,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IAC1H,CAAC;IAED,6BAAM,GAAN,UAAO,KAAK;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,cAAc,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IAClI,CAAC;IAED,8BAAO,GAAP,UAAQ,EAAU;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,aAAa,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IAC9H,CAAC;IAED,6BAAM,GAAN,UAAO,KAAK,EAAG,EAAE;QACb,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,eAAe,GAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IACvI,CAAC;IAED,gCAAS,GAAT,UAAU,EAAU;QAChB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,eAAe,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,QAAkB,IAAK,eAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC,CAAC;IAChI,CAAC;IAGD,yBAAyB;IAEjB,0BAAG,GAAX;QACI,6CAA6C;QAC7C,IAAI,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC;QAClE,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,EAAE;YAClC,IAAI,OAAO,GAAG,IAAI,qDAAO,CAAC,EAAE,eAAe,EAAE,SAAS,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;YAC9E,OAAO,IAAI,4DAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;SACnD;IACL,CAAC;IAnCQ,YAAY;QADxB,gEAAU,EAAE;+EAEiB,kDAAI,EAAmB,mFAAmB;OAD3D,YAAY,CAoCxB;IAAD,mBAAC;CAAA;AApCwB","file":"common-es5.js","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Headers, Http, RequestOptions, Response } from \"@angular/http\";\nimport { ScriptLoaderService } from '../../_services/script-loader.service';\nimport { Staff } from \"../_models/index\";\n\n@Injectable()\nexport class StaffService {\n    constructor(private http: Http, private baseUrl: ScriptLoaderService) {\n    }\n\n    getAll() {\n        return this.http.get(this.baseUrl._baseUrl + 'staff/getall', this.jwt()).map((response: Response) => response.json());\n    }\n\n    create(staff) {\n        return this.http.post(this.baseUrl._baseUrl + 'staff/create', staff, this.jwt()).map((response: Response) => response.json());\n    }\n\n    getById(id: number) {\n        return this.http.get(this.baseUrl._baseUrl + 'staff/edit/' + id, this.jwt()).map((response: Response) => response.json());\n    }\n\n    update(staff , id) {\n        console.log(id);\n        return this.http.post(this.baseUrl._baseUrl + 'staff/update/'+ id, staff, this.jwt()).map((response: Response) => response.json());\n    }\n\n    del_staff(id: number) {\n        return this.http.get(this.baseUrl._baseUrl + 'staff/delete/' + id, this.jwt()).map((response: Response) => response.json());\n    }\n\n    \n    // private helper methods\n\n    private jwt() {\n        // create authorization header with jwt token\n        let currentUser = JSON.parse(localStorage.getItem('currentUser'));\n        if (currentUser && currentUser.token) {\n            let headers = new Headers({ 'Authorization': 'Bearer ' + currentUser.token });\n            return new RequestOptions({ headers: headers });\n        }\n    }\n}\n"],"sourceRoot":""}